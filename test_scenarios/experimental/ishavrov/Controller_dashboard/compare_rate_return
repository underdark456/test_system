from src import nms_api, test_api
from src.drivers.uhp.uhp_requests_driver import UhpRequestsDriver
import time


nms_options = test_api.get_nms()
nms_api.connect(nms_options.get('nms_ip'), nms_options.get('username'), nms_options.get('password'))

UHP1 = UhpRequestsDriver('10.56.33.20')

def return_rate_all():
    # 2 Stations, traffic for P1
    return_rate_2 = []
    return_rate_3 = []
    for i in range(1,3):
        time.sleep(5)
        return_rate_2.append(UHP1.get_stations_state().get('2', {'bytes': 'NA'})['bytes'])
        return_rate_3.append(UHP1.get_stations_state().get('3', {'bytes': 'NA'})['bytes'])
    return_rate_2_map = list(map(int,return_rate_2))
    return_rate_3_map = list(map(int,return_rate_3))
    rate_2 = ((return_rate_2_map[1] - return_rate_2_map[0]) * 8) / 5
    rate_3 = ((return_rate_3_map[1] - return_rate_3_map[0]) * 8) / 5
    total = int((rate_2 + rate_3) / 1000)
    print(total)
#
# def return_px():
# print(UHP1.get_overview().get('network').get('rx_errors')) # RX errors in return channel
# print(UHP1.get_modulator_stats())
# return_rate_all()
# print(UHP1.get_stations_state())
def return_p2():
    return_p2 = []
    for i in range(1, 3):
        time.sleep(5)
        return_p2.append(UHP1.get_stations_byprio().get('2').get('p2_bytes'))
    return_p_2_map = list(map(int, return_p2))
    rate_p2 = (return_p_2_map[1] - return_p_2_map[0]) / 5 / 125000 # convert bytes to mbits (for 1 sec)
    print(rate_p2)
return_p2()
